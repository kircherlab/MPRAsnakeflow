##########################
#### containerization ####
##########################

f = open(workflow.source_path("../version.txt"))
version = f.read().strip()

print(f"\033[95mRunning MPRAsnakeflow version {version}\033[0m")


containerized: f"docker://visze/mprasnakeflow:{version}"


#################
#### imports ####
#################
import pandas as pd

##################
#### SETTINGS ####
##################

##### check snakemake min version #####
from snakemake.utils import min_version

min_version("8.24.1")


##### report workflow #####
report: "report/workflow.rst"


##### General wirldcard constrains #####
wildcard_constraints:
    project=r"[^/\.]+",
    assignment=r"[^/\.]+",
    condition=r"[^/_\.]+",
    replicate=r"[^/_\.]+",
    type=r"(DNA)|(RNA)",
    config=r"[^/\.]+",


##### localrules #####
localrules:
    all,
    experiment_counts_demultiplex_aggregate,


# common workflow
include: "rules/common.smk"


###################
#### ALL RULES ####
###################


rule all:
    """
    General all rule to get all output files for MPRAsnakeflow (default rule).
    """
    input:
        ## report
        getAssignmentConfig_helper(
            [
                "results/assignment/{assignment}/qc_report.{config}.html",
                "results/assignment/{assignment}/qc_metrics.{config}.json",
            ]
        ),
        getOutputProjectConditionAssignmentConfig_helper(
            [
                "results/experiments/{project}/qc_report.{condition}.{assignment}.{config}.html",
                "results/experiments/{project}/qc_metrics.{condition}.{assignment}.{config}.json",
            ]
        ),
        ## assignments
        getAssignmentConfig_helper(
            [
                "results/assignment/{assignment}/assignment_barcodes.{config}.tsv.gz",
                "results/assignment/{assignment}/statistic/assigned_counts.{config}.tsv",
                "results/assignment/{assignment}/statistic/assignment.{config}.png",
            ]
        ),
        getAssignment_helper(
            ["results/assignment/{assignment}/statistic/total_counts.tsv"]
        ),
        getAssignment_helper(
            ["results/assignment/{assignment}/statistic/assignment/bam_stats.txt"],
            match_methods=["bwa", "bbmap"],
        ),
        ## experiments
        # statistic BC nucleotide composition
        getOutputProjectConditionReplicateType_helper(
            [
                "results/experiments/{project}/statistic/counts/BCNucleotideComposition.{condition}_{replicate}_{type}.tsv.gz"
            ]
        ),
        # counts statistic
        expand(
            "results/experiments/{project}/statistic/counts.{countType}.tsv",
            project=getProjects(),
            countType=["raw", "filtered"],
        ),
        getOutputProjectConditionReplicateType_helper(
            [
                "results/experiments/{project}/statistic/counts.freqUMIs.{condition}_{replicate}_{type}.txt"
            ]
        ),
        getOutputProjectConfig_helper(
            [
                "results/experiments/{project}/statistic/statistic_bc_correlation_merged_{config}.tsv",
            ],
            True,
        ),
        getOutputProjectConditionConfigType_helper(
            [
                "results/experiments/{project}/statistic/barcode/counts/{condition}_{config}_{type}_perBarcode.png"
            ]
        ),
        getOutputProjectConditionAssignmentConfigType_helper(
            [
                "results/experiments/{project}/statistic/barcode/assigned_counts/{assignment}/{condition}_{config}_{type}_perBarcode.png"
            ]
        ),
        # bc_overlap statistic
        getOutputProjectConfig_helper(
            ["results/experiments/{project}/statistic/bc_overlap.counts.{config}.tsv"],
            True,
        ),
        getOutputProjectAssignmentConfig_helper(
            [
                "results/experiments/{project}/statistic/statistic_assigned_bc_correlation_merged_{assignment}_{config}.tsv",
                "results/experiments/{project}/statistic/bc_overlap.assigned_counts.{config}.{assignment}.tsv",
            ],
            True,
        ),
        # assignment
        getOutputProjectConditionAssignmentConfig_helper(
            [
                "results/experiments/{project}/assigned_counts/{assignment}/{config}/{condition}_allreps_merged.tsv.gz",
                "results/experiments/{project}/assigned_counts/{assignment}/{config}/{condition}_allreps_merged.combined.tsv.gz",
                "results/experiments/{project}/assigned_counts/{assignment}/{config}/{condition}_allreps_minThreshold_merged.combined.tsv.gz",
                "results/experiments/{project}/assigned_counts/{assignment}/{config}/{condition}_allreps_merged_barcode_assigned_counts.tsv.gz",
                "results/experiments/{project}/assigned_counts/{assignment}/{config}/{condition}_allreps_minThreshold_merged_barcode_assigned_counts.tsv.gz",
                "results/experiments/{project}/reporter_experiment.oligo.{condition}.{assignment}.{config}.all.tsv.gz",
                "results/experiments/{project}/reporter_experiment.barcode.{condition}.{assignment}.{config}.all.tsv.gz",
            ]
        ),
        getOutputProjectConditionAssignmentConfigThreshold_helper(
            [
                "results/experiments/{project}/reporter_experiment.barcode.{condition}.{assignment}.{config}.min_oligo_threshold_{threshold}.tsv.gz",
                "results/experiments/{project}/reporter_experiment.oligo.{condition}.{assignment}.{config}.min_oligo_threshold_{threshold}.tsv.gz",
            ]
        ),
        # assignment statistic
        getOutputProjectConditionAssignmentConfig_helper(
            [
                "results/experiments/{project}/statistic/assigned_counts/{assignment}/{config}/{condition}_group_barcodesPerInsert_box.png",
                "results/experiments/{project}/statistic/assigned_counts/{assignment}/{config}/{condition}_group_barcodesPerInsert_box_minThreshold.png",
                "results/experiments/{project}/statistic/statistic_assigned_counts_merged_{assignment}_{config}.tsv",
            ]
        ),
        getOutputProjectAssignmentConfig_helper(
            [
                "results/experiments/{project}/statistic/statistic_oligo_correlation_merged_{assignment}_{config}.tsv",
                "results/experiments/{project}/statistic/statistic_assigned_counts_single_{assignment}_{config}.tsv",
            ],
            True,
        ),
        # variants
        getOutputVariants_helper(
            [
                "results/experiments/{project}/statistic/variants/{assignment}/{config}/correlation_variantTable.tsv",
            ],
            True,
        ),
        getOutputVariants_helper(
            [
                "results/experiments/{project}/variants/{assignment}/{config}/{condition}_variantTable.tsv.gz",
            ],
            False,
        ),


rule all_qc_report:
    """
    All rule to generate QC reports.
    """
    input:
        getAssignmentConfig_helper(
            ["results/assignment/{assignment}/qc_report.{config}.html"]
        ),
        getOutputProjectConditionAssignmentConfig_helper(
            [
                "results/experiments/{project}/qc_report.{condition}.{assignment}.{config}.html"
            ]
        ),


rule all_assignments:
    """
    All rule to get all output files for the assignments workflow.
    """
    input:
        getAssignmentConfig_helper(
            [
                "results/assignment/{assignment}/assignment_barcodes.{config}.tsv.gz",
                "results/assignment/{assignment}/statistic/assigned_counts.{config}.tsv",
                "results/assignment/{assignment}/statistic/assignment.{config}.png",
            ]
        ),
        getAssignment_helper(
            ["results/assignment/{assignment}/statistic/total_counts.tsv"]
        ),
        getAssignment_helper(
            ["results/assignment/{assignment}/statistic/assignment/bam_stats.txt"],
            match_methods=["bwa", "bbmap"],
        ),


rule all_experiments:
    """
    All rule to get all output files for the experiment workflow.
    """
    input:
        # stats BC nucleotide composition
        getOutputProjectConditionReplicateType_helper(
            [
                "results/experiments/{project}/statistic/counts/BCNucleotideComposition.{condition}_{replicate}_{type}.tsv.gz",
                "results/experiments/{project}/counts/{condition}_{replicate}_{type}_final_counts.tsv.gz",
            ]
        ),
        # counts
        getOutputProjectConditionReplicateType_helper(
            [
                "results/experiments/{project}/counts/{condition}_{replicate}_{type}.bam"
            ],
            skip={"demultiplex": True},
        ),
        # counts statistic
        expand(
            "results/experiments/{project}/statistic/counts.{countType}.tsv",
            project=getProjects(),
            countType=["raw", "filtered"],
        ),
        getOutputProjectConditionReplicateType_helper(
            [
                "results/experiments/{project}/statistic/counts.freqUMIs.{condition}_{replicate}_{type}.txt"
            ]
        ),
        getOutputProjectConfig_helper(
            [
                "results/experiments/{project}/statistic/statistic_bc_correlation_merged_{config}.tsv"
            ],
            True,
        ),
        getOutputProjectConditionConfigType_helper(
            [
                "results/experiments/{project}/statistic/barcode/counts/{condition}_{config}_{type}_perBarcode.png"
            ]
        ),
        getOutputProjectConditionAssignmentConfigType_helper(
            [
                "results/experiments/{project}/statistic/barcode/assigned_counts/{assignment}/{condition}_{config}_{type}_perBarcode.png"
            ]
        ),
        getOutputProjectAssignmentConfig_helper(
            [
                "results/experiments/{project}/statistic/statistic_assigned_bc_correlation_merged_{assignment}_{config}.tsv",
            ],
            True,
        ),
        # bc_overlap statistic
        getOutputProjectConfig_helper(
            ["results/experiments/{project}/statistic/bc_overlap.counts.{config}.tsv"],
            True,
        ),
        getOutputProjectAssignmentConfig_helper(
            [
                "results/experiments/{project}/statistic/bc_overlap.assigned_counts.{config}.{assignment}.tsv",
            ],
            True,
        ),
        # assignment
        getOutputProjectConditionAssignmentConfig_helper(
            [
                "results/experiments/{project}/assigned_counts/{assignment}/{config}/{condition}_allreps_merged.tsv.gz",
                "results/experiments/{project}/assigned_counts/{assignment}/{config}/{condition}_allreps_merged.combined.tsv.gz",
                "results/experiments/{project}/assigned_counts/{assignment}/{config}/{condition}_allreps_minThreshold_merged.combined.tsv.gz",
                "results/experiments/{project}/assigned_counts/{assignment}/{config}/{condition}_allreps_merged_barcode_assigned_counts.tsv.gz",
                "results/experiments/{project}/assigned_counts/{assignment}/{config}/{condition}_allreps_minThreshold_merged_barcode_assigned_counts.tsv.gz",
                "results/experiments/{project}/reporter_experiment.oligo.{condition}.{assignment}.{config}.all.tsv.gz",
                "results/experiments/{project}/reporter_experiment.barcode.{condition}.{assignment}.{config}.all.tsv.gz",
            ]
        ),
        getOutputProjectConditionAssignmentConfigThreshold_helper(
            [
                "results/experiments/{project}/reporter_experiment.barcode.{condition}.{assignment}.{config}.min_oligo_threshold_{threshold}.tsv.gz",
                "results/experiments/{project}/reporter_experiment.oligo.{condition}.{assignment}.{config}.min_oligo_threshold_{threshold}.tsv.gz",
            ]
        ),
        # assignment statistic
        getOutputProjectConditionAssignmentConfig_helper(
            [
                "results/experiments/{project}/statistic/assigned_counts/{assignment}/{config}/{condition}_group_barcodesPerInsert_box.png",
                "results/experiments/{project}/statistic/assigned_counts/{assignment}/{config}/{condition}_group_barcodesPerInsert_box_minThreshold.png",
            ]
        ),
        getOutputProjectAssignmentConfig_helper(
            [
                "results/experiments/{project}/statistic/statistic_assigned_counts_merged_{assignment}_{config}.tsv"
            ]
        ),
        getOutputProjectAssignmentConfig_helper(
            [
                "results/experiments/{project}/statistic/statistic_oligo_correlation_merged_{assignment}_{config}.tsv",
                "results/experiments/{project}/statistic/statistic_assigned_counts_single_{assignment}_{config}.tsv",
            ],
            True,
        ),
        # variants
        getOutputVariants_helper(
            [
                "results/experiments/{project}/statistic/variants/{assignment}/{config}/correlation_variantTable.tsv"
            ],
            True,
        ),


rule all_experiments_counts_stats:
    """
    All rule to get count statistics of the experiment workflow.
    """
    input:
        getOutputProjectConditionReplicateType_helper(
            [
                "results/experiments/{project}/statistic/counts.freqUMIs.{condition}_{replicate}_{type}.txt"
            ]
        ),
        getOutputProjectConfig_helper(
            [
                "results/experiments/{project}/statistic/statistic_bc_correlation_merged_{config}.tsv"
            ],
            True,
        ),
        getOutputProjectConditionConfigType_helper(
            [
                "results/experiments/{project}/statistic/barcode/counts/{condition}_{config}_{type}_perBarcode.png"
            ]
        ),
        getOutputProjectConditionAssignmentConfigType_helper(
            [
                "results/experiments/{project}/statistic/barcode/assigned_counts/{assignment}/{condition}_{config}_{type}_perBarcode.png"
            ]
        ),


rule all_bc_overlap_statistic:
    """
    All rule to get BC overlap statistic of the experiment workflow.
    """
    input:
        getOutputProjectConfig_helper(
            ["results/experiments/{project}/statistic/bc_overlap.counts.{config}.tsv"],
            True,
        ),
        getOutputProjectAssignmentConfig_helper(
            [
                "results/experiments/{project}/statistic/bc_overlap.assigned_counts.{config}.{assignment}.tsv",
            ],
            True,
        ),


rule all_experiments_assignments:
    """
    All rule to get assigned counts for experiment workflow.
    """
    input:
        getOutputProjectConditionAssignmentConfig_helper(
            [
                "results/experiments/{project}/assigned_counts/{assignment}/{config}/{condition}_allreps_merged.tsv.gz",
                "results/experiments/{project}/assigned_counts/{assignment}/{config}/{condition}_allreps_merged.combined.tsv.gz",
                "results/experiments/{project}/assigned_counts/{assignment}/{config}/{condition}_allreps_minThreshold_merged.combined.tsv.gz",
            ]
        ),


rule all_experiments_assignments_statistic:
    """
    All rule to get assigned counts statistic for experiment workflow.
    """
    input:
        getOutputProjectConditionAssignmentConfig_helper(
            [
                "results/experiments/{project}/statistic/assigned_counts/{assignment}/{config}/{condition}_group_barcodesPerInsert_box.png",
                "results/experiments/{project}/statistic/assigned_counts/{assignment}/{config}/{condition}_group_barcodesPerInsert_box_minThreshold.png",
            ]
        ),
        getOutputProjectAssignmentConfig_helper(
            [
                "results/experiments/{project}/statistic/statistic_assigned_counts_merged_{assignment}_{config}.tsv"
            ]
        ),
        getOutputProjectAssignmentConfig_helper(
            [
                "results/experiments/{project}/statistic/statistic_oligo_correlation_merged_{assignment}_{config}.tsv",
                "results/experiments/{project}/statistic/statistic_assigned_counts_single_{assignment}_{config}.tsv",
            ],
            True,
        ),


rule all_stats_BCNucleotideComposition:
    """
    All rule to get BC nucleotide composition of the experiment workflow.
    """
    input:
        getOutputProjectConditionReplicateType_helper(
            [
                "results/experiments/{project}/statistic/counts/BCNucleotideComposition.{condition}_{replicate}_{type}.tsv.gz"
            ]
        ),


rule all_variants:
    """
    All rule to get variant effects of the experiment workflow.
    """
    input:
        getOutputVariants_helper(
            [
                "results/experiments/{project}/statistic/variants/{assignment}/{config}/correlation_variantTable.tsv"
            ],
            True,
        ),
        getOutputVariants_helper(
            [
                "results/experiments/{project}/variants/{assignment}/{config}/{condition}_variantTable.tsv.gz"
            ],
            False,
        ),


###################
## SUB-WORKFLOWS ##
###################


# assignment workflow
include: "rules/assignment.smk"
# experiment workflow
include: "rules/experiment.smk"
# variant subworkflow (creating variant effects)
include: "rules/variants.smk"
# generating QC measures report
include: "rules/qc_report.smk"
